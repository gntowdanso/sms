// Prisma schema for School Management System
// Database: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAccount {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  passwordHash String
  role         Role     @relation(fields: [roleId], references: [id])
  roleId       Int
  lastLogin    DateTime?
  isActive     Boolean  @default(true)
}

model Role {
  id          Int      @id @default(autoincrement())
  roleName    String   @unique
  description String?
  users       UserAccount[]
}

enum SchoolType {
  BASIC
  SECONDARY
  TERTIARY
}

enum StaffRole {
  ADMIN
  FINANCE
  SECURITY
  LIBRARIAN
  TEACHER_LEAD
}

enum StaffType {
  TEACHER
  NON_TEACHER
}

model School {
  id              Int        @id @default(autoincrement())
  username        String     
  name            String
  address         String?
  contactInfo     String?
  type            SchoolType
  accreditationNo String?
  establishedDate DateTime?
  createdBy       String?
  updatedBy       String?
  // Opposite relations
  registrations   StudentRegistration[]
}

model Department {
  id          Int      @id @default(autoincrement())
  username    String   
  name        String
  description String?
  staffs      Staff[]  @relation("DepartmentStaff")
  subjects    Subject[]
  // Opposite relations
  registrations StudentRegistration[]
  }
  model Staff {
  id           Int        @id @default(autoincrement())
  username     String      
  staffNo      String     @unique
  firstName    String
  lastName     String
  role         StaffRole
  staffType    StaffType
  department   Department? @relation("DepartmentStaff", fields: [departmentId], references: [id])
  departmentId Int?
  contactInfo  String?
  email        String?
  employmentDate DateTime?
  teachingClasses Class[] @relation("ClassTeacher")
}

enum SubjectCategory {
  CORE
  ELECTIVE
}

enum AcademicYearStatus {
  ACTIVE
  INACTIVE
}

enum TermStatus {
  ACTIVE
  INACTIVE
}

model Class {
  id            Int      @id @default(autoincrement())
  username      String   
  name          String
  section       String? 
  capacity      Int?
  classTeacher  Staff?   @relation("ClassTeacher", fields: [classTeacherId], references: [id])
  classTeacherId Int?
  sections      Section[] @relation("ClassSections")
  curriculums   Curriculum[]
  // Opposite relations
  registrations StudentRegistration[]
}

model Section {
  id        Int    @id @default(autoincrement())
  username  String 
  class     Class  @relation("ClassSections", fields: [classId], references: [id])
  classId   Int
  name      String
  capacity  Int?
  // Opposite relations
  registrations StudentRegistration[]
}

model Subject {
  id          Int             @id @default(autoincrement())
  username    String          
  name        String
  code        String?
  category    SubjectCategory
  creditHours Int?
  department  Department?     @relation(fields: [departmentId], references: [id])
  departmentId Int?
  curricula  Curriculum[] // üëà opposite relation
  // Back-relations
  reportCardDetails ReportCardDetail[]
   
}

 



model AcademicYear {
  id          Int       @id @default(autoincrement())
  username    String    
  yearName    String
  startDate   DateTime?
  endDate     DateTime?
  status      AcademicYearStatus @default(ACTIVE)
   curricula    Curriculum[]  // üëà opposite relation
  registrations StudentRegistration[] 
  terms        Term[]
  // Back-relations for academic entities
  assessments        Assessment[]
  examPapers         ExamPaper[]
  assessmentResults  AssessmentResult[]
  attendances        Attendance[]
  assignments        Assignment[]
  assignmentSubmissions AssignmentSubmission[]
  reportCards        ReportCard[]
  promotionRecords   PromotionRecord[]
  // Finance back-relations
  feeStructures      FeeStructure[]
  invoices           Invoice[]
  fines              Fine[]
  financialReports   FinancialReport[]
  // Accounting back-relations
  journalEntries     JournalEntry[]
  ledgers            Ledger[]
}
//
model Term {
  id              Int         @id @default(autoincrement())
  username        String      
  name            String
  startDate       DateTime?
  endDate         DateTime?
  status          TermStatus  @default(ACTIVE)

  academicYear    AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId  Int?
  curricula    Curriculum[]  // üëà opposite relation
  registrations StudentRegistration[]
  // Back-relations for academic entities
  assessments        Assessment[]
  examPapers         ExamPaper[]
  assessmentResults  AssessmentResult[]
  attendances        Attendance[]
  assignments        Assignment[]
  assignmentSubmissions AssignmentSubmission[]
  reportCards        ReportCard[]
  promotionRecords   PromotionRecord[]
  // Finance back-relations
  feeStructures      FeeStructure[]
  invoices           Invoice[]
  fines              Fine[]
  financialReports   FinancialReport[]
  // Accounting back-relations
  journalEntries     JournalEntry[]
  ledgers            Ledger[]
}
// SUBJECT CLASS LINK
model Curriculum {
  id            Int          @id @default(autoincrement())
  username      String       
  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  term          Term         @relation(fields: [termId], references: [id])
  termId        Int
  subject       Subject      @relation(fields: [subjectId], references: [id])
  subjectId     Int
  classId       Int
  class         Class        @relation(fields: [classId], references: [id])

  // Opposite relations
  studentCurriculums   StudentCurriculum[]
}


//
model StudentApplication {
  id              Int      @id @default(autoincrement())
  username        String   
  firstName       String
  lastName        String
  otherNames      String?
  dateOfBirth     DateTime?
  gender          String?
  address         String?
  email           String?
  contactNumber   String?
  previousSchool  String?
  intendedClass   String?
  guardianName    String?
  guardianContact String?
  applicationDate DateTime @default(now())
  status          String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
}

model Student {
  id              Int       @id @default(autoincrement())
  username        String    
  studentNo       String    @unique
  firstName       String
  lastName        String
  otherNames      String?
  dateOfBirth     DateTime?
  gender          String?
  address         String?
  email           String?
  contactNumber   String?

  // Extended Bio
  nationality      String?
  placeOfBirth     String?
  religion         String?
  bloodGroup       String?
  medicalHistory   String?
  allergies        String?
  disability       String?

  // Previous School Information
  previousSchool   String?
  previousClass    String?
  transferReason   String?

  // Emergency Contact
  emergencyName     String?
  emergencyContact  String?
  emergencyRelation String?

  // Relations
  registrations StudentRegistration[]
  guardians     StudentGuardian[]
  reportCards   ReportCard[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model StudentGuardian {
  id             Int      @id @default(autoincrement())
  student        Student  @relation(fields: [studentId], references: [id])
  studentId      Int

  name           String
  relation       String?
  contactNumber  String?
  email          String?
  address        String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model StudentRegistration {
  id              Int       @id @default(autoincrement())
  username        String    
  student       Student     @relation(fields: [studentId], references: [id])
  studentId     Int
  status          String?   // PROMOTED, REPEATED, WITHDRAWN

  // Relations
  

  school        School      @relation(fields: [schoolId], references: [id])
  schoolId      Int

  department    Department? @relation(fields: [departmentId], references: [id])
  departmentId  Int?

  class         Class?      @relation(fields: [classId], references: [id])
  classId       Int?

  section       Section?    @relation(fields: [sectionId], references: [id])
  sectionId     Int?

  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int

  term          Term @relation(fields: [termId], references: [id])
  termId        Int

  curriculums   StudentCurriculum[]   // links registration to subjects

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Direct Curriculum relation removed; use StudentCurriculum join table instead
}


model StudentCurriculum {
  id                   Int                @id @default(autoincrement())
  studentRegistration  StudentRegistration @relation(fields: [studentRegistrationId], references: [id])
  studentRegistrationId Int

  curriculum           Curriculum         @relation(fields: [curriculumId], references: [id])
  curriculumId         Int

  isActive             Boolean            @default(true)
  createdAt            DateTime           @default(now())
}

/////  STUDENT  PERFORMACE Section
enum ExamType {
  MIDTERM
  FINAL
  OTHERS
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

 

enum InvoiceStatus {
  PAID
  UNPAID
  PARTIAL
}

enum PaymentMethod {
  CASH
  BANK
  MOBILEMONEY
}

enum ScholarshipType {
  SCHOLARSHIP
  FEEWAIVER
  DISCOUNT
}

// Expense categories used by the Expense model
enum ExpenseCategory {
  OPERATIONS
  MAINTENANCE
  UTILITIES
  SALARIES
  SUPPLIES
  OTHER
}

 
 
 

//
// üìù Academic Performance Entities 
//

model AssessmentType {
  id          Int     @id @default(autoincrement())
  username    String
  name        String   // e.g., Exam, Assignment, Quiz, Project, Homework, Attendance
  percentage  Float    // weight contribution (e.g., Exam = 60, Assignment = 10)
  description String?  // optional notes

  assessments Assessment[]
}

model Assessment {
  id              Int     @id @default(autoincrement())
  username        String
  title           String?   // e.g., "Midterm Exam", "Math Quiz 1"
  description     String?
  date            DateTime?
  classId         Int?
  subjectId       Int?
  teacherId       Int?
  assessmentTypeId Int
 academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  term          Term         @relation(fields: [termId], references: [id])
  termId        Int
  assessmentType AssessmentType @relation(fields: [assessmentTypeId], references: [id])
  results        AssessmentResult[]
  examPapers     ExamPaper[]
  reportCardDetails ReportCardDetail[]
}

model ExamPaper {
  id          Int     @id @default(autoincrement())
  username    String
  assessmentId Int
  subjectId   Int
  teacherId   Int
  maxMarks    Int
   academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  term          Term         @relation(fields: [termId], references: [id])
  termId        Int
  assessment Assessment     @relation(fields: [assessmentId], references: [id])
  results    AssessmentResult[]
}

model AssessmentResult {
  id            Int     @id @default(autoincrement())
  username      String
  assessmentId  Int
  examPaperId   Int?
  studentId     Int
  marksObtained Float?
  gradeId       Int?
  remarks       String?
  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  term          Term         @relation(fields: [termId], references: [id])
  termId        Int
  assessment Assessment   @relation(fields: [assessmentId], references: [id])
  examPaper  ExamPaper?   @relation(fields: [examPaperId], references: [id])
  grade      GradingScheme? @relation(fields: [gradeId], references: [id])
}

model GradingScheme {
  id       Int    @id @default(autoincrement())
  username String
  minMark  Int
  maxMark  Int
  grade    String
  remarks  String?
  results  AssessmentResult[]
}


model Attendance {
  id        Int              @id @default(autoincrement())
  username  String
  studentId Int
  classId   Int
  date      DateTime
  status    AttendanceStatus
  teacherId Int
  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  term          Term         @relation(fields: [termId], references: [id])
  termId        Int
}

model Assignment {
  id          Int    @id @default(autoincrement())
  username    String
  title       String
  description String?
  classId     Int
  subjectId   Int
  teacherId   Int
  dueDate     DateTime

  submissions AssignmentSubmission[]
  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  term          Term         @relation(fields: [termId], references: [id])
  termId        Int
}

model AssignmentSubmission {
  id            Int    @id @default(autoincrement())
  username      String
  assignmentId  Int
  studentId     Int
  submittedDate DateTime
  fileUrl       String?
  marks         Int?
  feedback      String?

  assignment Assignment @relation(fields: [assignmentId], references: [id])
academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  term          Term         @relation(fields: [termId], references: [id])
  termId        Int
}

model ReportCard {
  id             Int      @id @default(autoincrement())
  username       String
  studentId      Int
 
  overallGrade   String
  totalMarks     Int
  averageMarks   Float
  position       Int?        // e.g., 5th out of 30
  remarks        String?     // general remarks
  teacherRemark  String?     
  principalRemark String?    
academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  term          Term         @relation(fields: [termId], references: [id])
  termId        Int
  // relations
  student        Student   @relation(fields: [studentId], references: [id])
 
  results        ReportCardDetail[]
}

model ReportCardDetail {
  id           Int    @id @default(autoincrement())
  reportCardId Int
  subjectId    Int
  assessmentId Int?   // Homework/Quiz/Exam reference if needed
  marksObtained Int
  grade        String

  reportCard   ReportCard @relation(fields: [reportCardId], references: [id])
  subject      Subject    @relation(fields: [subjectId], references: [id])
  assessment   Assessment? @relation(fields: [assessmentId], references: [id])
}


model PromotionRecord {
  id          Int    @id @default(autoincrement())
  username    String
  studentId   Int
  fromClassId Int
  toClassId   Int
  promotionDate DateTime
  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  term          Term         @relation(fields: [termId], references: [id])
  termId        Int

}

//
// üìù Fees and Finance Entities 
//

model FeeItem {
  id           Int     @id @default(autoincrement())
  username     String
  name         String          // e.g., Tuition, PTA Levy, Sports Fee
  description  String?
  defaultAmount Float
  isOptional   Boolean @default(false)
  // Back-relations
  feeStructures FeeStructure[]
  invoiceLines  InvoiceLine[]
}

model FeeStructure {
  id             Int    @id @default(autoincrement())
  username       String
  classId        Int
  academicYearId Int
  termId         Int
  feeItemId      Int
  amount         Float

  feeItem        FeeItem @relation(fields: [feeItemId], references: [id])
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  term           Term         @relation(fields: [termId], references: [id])
}

model Invoice {
  id          Int    @id @default(autoincrement())
  username    String
  studentId   Int
  termId      Int
  issueDate   DateTime
  dueDate     DateTime
  totalAmount Float
  status      InvoiceStatus

  lines       InvoiceLine[]
  payments    Payment[]
  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  term          Term         @relation(fields: [termId], references: [id])
}

model InvoiceLine {
  id         Int    @id @default(autoincrement())
  invoiceId  Int
  feeItemId  Int
  amount     Float

  invoice    Invoice @relation(fields: [invoiceId], references: [id])
  feeItem    FeeItem @relation(fields: [feeItemId], references: [id])
}

model Payment {
  id          Int    @id @default(autoincrement())
  username    String
  invoiceId   Int
  studentId   Int
  paymentDate DateTime
  amountPaid  Float
  method      PaymentMethod
  receiptNo   String

  invoice Invoice @relation(fields: [invoiceId], references: [id])
}

model Scholarship {
  id             Int    @id @default(autoincrement())
  username       String
  studentId      Int
  type           ScholarshipType
  amount         Float
  academicYearId Int
  termId         Int
}

model Fine {
  id        Int    @id @default(autoincrement())
  username  String
  studentId Int
  reason    String
  amount    Float
  date      DateTime
  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  term          Term         @relation(fields: [termId], references: [id])
  termId        Int
}

model Expense {
  id         Int    @id @default(autoincrement())
  username   String
  category   ExpenseCategory
  amount     Float
  date       DateTime
  approvedBy String
}

model Budget {
  id             Int    @id @default(autoincrement())
  username       String
  academicYearId Int
  termId         Int
  category       String
  plannedAmount  Float
  actualAmount   Float
}

model FinancialReport {
  id             Int    @id @default(autoincrement())
  username       String
academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  term          Term         @relation(fields: [termId], references: [id])
  termId        Int
  reportTitle    String
  generatedDate  DateTime
  fileUrl        String
}

model AccountType {
  id       Int    @id @default(autoincrement())
  name     String   // Asset, Liability, Equity, Revenue, Expense
  code     String   // e.g., 1000 for Assets, 2000 for Liabilities
  accounts ChartOfAccount[]
}

model ChartOfAccount {
  id           Int    @id @default(autoincrement())
  username     String
  accountCode  String
  accountName  String
  accountTypeId Int

  accountType  AccountType @relation(fields: [accountTypeId], references: [id])
  ledgers      Ledger[]
  journalLines JournalLine[]
}

model JournalEntry {
  id          Int    @id @default(autoincrement())
  date        DateTime
  description String
  postedBy    String
  lines       JournalLine[]
  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  term          Term         @relation(fields: [termId], references: [id])
  termId        Int
}

model JournalLine {
  id             Int    @id @default(autoincrement())
  journalEntryId Int
  accountId      Int
  debit          Float @default(0)
  credit         Float @default(0)

  journalEntry   JournalEntry  @relation(fields: [journalEntryId], references: [id])
  account        ChartOfAccount @relation(fields: [accountId], references: [id])
}

model Ledger {
  id         Int    @id @default(autoincrement())
  accountId  Int
  date       DateTime
  debit      Float @default(0)
  credit     Float @default(0)
  balance    Float

  account    ChartOfAccount @relation(fields: [accountId], references: [id])
academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  term          Term         @relation(fields: [termId], references: [id])
  termId        Int
}
